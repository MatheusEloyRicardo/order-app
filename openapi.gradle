buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.2.0"
    }
}

apply plugin: 'org.openapi.generator'


import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

def diretorioBuild = layout.buildDirectory.dir('build').get().asFile.path.replaceFirst('build', '')
def pacoteBase = 'br.order'
def pacoteSpecs = "$rootDir/src/main/resources/swagger/"

sourceSets.main.java.srcDir "${diretorioBuild}/generated/src/main/java"
sourceSets.main.resources.srcDir "${diretorioBuild}/generated/src/main/resources"

idea {
    module {
        generatedSourceDirs += file("${diretorioBuild}/generated-sources/src/main/java")
    }
}

List<String> nomesSpecs = fileTree("${pacoteSpecs}").filter { it.isFile() }.files.name
nomesSpecs.forEach { nome ->
    def modulo = nome.replaceAll('.yml|.yaml', '')

    String taskName = "openApiGenerate_" + modulo;
    tasks.register(taskName, GenerateTask) {
        generatorName = 'spring'
        inputSpec = "${pacoteSpecs}${nome}"
        outputDir = "${diretorioBuild}/generated"
        apiPackage = "${pacoteBase}${modulo}.adapters.controllers"
        modelPackage = "${pacoteBase}${modulo}.application.dtos"
        invokerPackage = "${pacoteBase}${modulo}.application.ports.service"
        logToStderr = true
        configOptions = [
                serializationLibrary                : 'jackson',
                requestMappingMode                  : 'api_interface',
                useSpringBoot3                      : 'true',
                interfaceOnly                       : 'true',
                unhandledException                  : 'true',
                returnSuccessCode                   : 'true',
                useTags                             : 'true',
                skipDefaultInterface                : 'true',
                hideGenerationTimestamp             : 'true',
                containerDefaultToNull              : 'true',
                generateConstructorWithAllArgs      : 'false',
                generatedConstructorWithRequiredArgs: 'false',
        ]
        additionalProperties = [
                'useLombok'                     : true,
                'additionalModelTypeAnnotations': '@lombok.Data @lombok.Builder @lombok.NoArgsConstructor @lombok.AllArgsConstructor'
        ]
        importMappings = [
                'Pageable': 'org.springframework.data.domain.Pageable'
        ]
    }

    compileJava.dependsOn(taskName)
    processResources.dependsOn(taskName)
}
